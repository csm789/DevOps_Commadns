*Complete Installation of Kubernetes using Command Line KubeADM*
hostname
hostnamectl set-hostname ec2-13-52-111-156.us-west-1.compute.amazonaws.com
hostname

swapoff -a
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
apt-get update
vi /etc/apt/sources.list
apt-get install -y docker-ce
apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
cd /etc/apt/
kubeadm init
exit.

=====================================================================================================
*Just Run this for Installation K8s*
=====================================================================================================
swapoff -a

#Docker Installation
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
apt-get update
apt-get install -y docker-ce

#Kubernetes Installation
apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
=====================================================================================================

#A simple code to create a pod by using k8s.yml#
apiVersion: v1
kind: pod
metadata:
  name: demo-app
  labels:
    app: demo
spec:
  containers:
  - name: demo-container
    image: busybox
    command: ['sh', '-c', 'echo Hello world! && sleep 30']
=====================================================================================================
#ReplicaSet#
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-replica-app
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-replica-app
  template:
    metadata:
      labels:
        app: my-replica-app
    spec:
      containers:
      - name: replica-sets
        image: nginx
======================================================================================================

#Deployment of nginx#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx
spec:
  replicas: 20
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-deploy-app
        image: nginx:1.9.1
        ports:
        - containerPort: 80
===========================================================================================================

#nodeport to the external world#
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
=========================================================================================================